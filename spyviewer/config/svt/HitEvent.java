package config.svt;

import java.util.Iterator;
import config.util.AppConstants;

public class HitEvent extends SvtEvent {
  private int nSVXHits, nXFTHits;
    /** Constructor 
     *  @param data  The event words
     *  @param ee    The End Event word
     */
  public HitEvent(final int [] data, int ee) {
    super(data, ee);
  }
  public void addObjects(final int [] data) {
    nSVXHits = nXFTHits = 0;
    for (int i = 0; i < data.length; i++) {
      Hit hit = new Hit(data[i]);
      if (hit.isXftWord()) 
        nXFTHits++;
      else
        nSVXHits++;
      addObject(hit);
    }
  }
    /** Get a Hit object
     *  @param i Hit index
     *  @return i-th Hit
     */
  public Hit getHit(int i) {
    return (Hit) getObject(i);
  }
  public String toString() {
    StringBuilder buf = new StringBuilder(config.util.AppConstants.MEDIUM_BUFFER_SIZE);
    int nSvx = 0, 
        nXft = 0, 
       iword = 0;
    boolean lastWasXft = true;
    buf.append("Ev ").append(getIndex()).append(" ==\n");
    for (Iterator<SvtObject> it = iterator(); it.hasNext(); ) {
      Hit hit = (Hit) it.next();
      if (hit.isXftWord()) {
        if (!lastWasXft || nXft==0) 
        buf.append(" XFT Hit").append(Hit.getXFTBanner());
        iword = ++nXft;
        lastWasXft = true;
      }
      else {
        if (lastWasXft) 
        buf.append(" SVX Hit").append(Hit.getSVXBanner());
        iword = ++nSvx;
        lastWasXft = false;
      }
      buf.append(AppConstants.d8Format.sprintf(iword)).append(hit);
    }
    return buf.toString();
  }
  public int getNSVXHits() {
    return nSVXHits;
  }
  public int getNXFTHits() {
    return nXFTHits;
  }
  public static void main(String [] argv) {
    int [] words = {
        0x2497f8, 0x249588, 0x28a664, 0x249565, 0x2409a8, 0x2409c8, 0x2caa78, 0x289218, 0x2417f8, 0x249238,
        0x2891f8, 0x2ca898, 0x28912a, 0x2485eb, 0x2485c3, 0x288328, 0x2484a4, 0x24832b, 0x2482c8, 0x248049,
        0x248008, 0x2c9628, 0x2c9458, 0x2597f0, 0x218ff0, 0x210108, 0x2597ba, 0x218faa, 0x259788, 0x218f78,
        0x2101d8, 0x250460, 0x2101f8, 0x250498, 0x259760, 0x218f08, 0x210228, 0x2504b8, 0x259738, 0x218ec8,
        0x210258, 0x2504f8, 0x210278, 0x250538, 0x210298, 0x250562, 0x25d700, 0x218e05, 0x25d690, 0x250588,
        0x2102e8, 0x218d68, 0x210308, 0x218b58, 0x259648, 0x2505b0, 0x259618, 0x2505e8, 0x2595e8, 0x250618,
        0x214350, 0x250648, 0x2595b2, 0x218a08, 0x290528, 0x250668, 0x2143b0, 0x250698, 0x259578, 0x2506b8,
        0x259548, 0x218938, 0x259520, 0x2506d8, 0x214410, 0x29a738, 0x214450, 0x29a718, 0x2594f0, 0x250748,
        0x210488, 0x250778, 0x2104a8, 0x29a6f8, 0x2594be, 0x29a6d8, 0x259498, 0x29a640, 0x259478, 0x218828,
        0x259408, 0x29a608, 0x214618, 0x29a5e8, 0x290568, 0x2187e0, 0x2107d8, 0x29a558, 0x2593a8, 0x250b18,
        0x210af8, 0x218788, 0x210b28, 0x29a518, 0x290598, 0x29a4e8, 0x259008, 0x218728, 0x210b60, 0x29a4c8,
        0x210b90, 0x29a498, 0x2905d8, 0x29a468, 0x294620, 0x2186b8, 0x290668, 0x29a3f8, 0x210bf8, 0x218678,
        0x290688, 0x29a098, 0x210c98, 0x218638, 0x2906b8, 0x218618, 0x290710, 0x2587f8, 0x294760, 0x258738,
        0x299b08, 0x258718, 0x2550a8, 0x210da8, 0x299ad8, 0x258688, 0x210de0, 0x2510f8, 0x210e08, 0x251128,
        0x2907a0, 0x299a98, 0x2583e8, 0x218258, 0x2907c8, 0x251158, 0x210e58, 0x251188, 0x2583b8, 0x2511b8,
        0x218138, 0x258398, 0x218108, 0x258368, 0x2180e8, 0x258330, 0x2511f0, 0x2907e8, 0x2180b8, 0x2908d8,
        0x251218, 0x25c2e8, 0x218088, 0x2949b0, 0x218060, 0x290c88, 0x255258, 0x290cb8, 0x2512c8, 0x25c278,
        0x218038, 0x290d58, 0x218010, 0x290dd8, 0x2512f2, 0x290df8, 0x2910e6, 0x251328, 0x2951f8, 0x251358,
        0x291238, 0x251398, 0x2912a0, 0x299a50, 0x2912d8, 0x2999f8, 0x2912f8, 0x2999b0, 0x291698, 0x299968,
        0x295998, 0x2dddf0, 0x29d928, 0x2dddb0, 0x29d8d0, 0x2d934a, 0x29d880, 0x2d9324, 0x299840, 0x291d00,
        0x299810, 0x2d8258, 0x29cfd0, 0x298f90, 0x291d68, 0x298ee8, 0x298ea8, 0x291e68, 0x291e88, 0x298e48,
        0x2a0188, 0x269524, 0x2694e9, 0x2694a3, 0x220f85, 0x220fa8, 0x26d460, 0x265390, 0x26d2c0, 0x261638,
        0x261658, 0x26167d, 0x268f2a, 0x2a1f4a, 0x268e38, 0x2a60c0, 0x26c440
    }; 
    System.out.println(new HitEvent(words, 0x604144));
  }
}
